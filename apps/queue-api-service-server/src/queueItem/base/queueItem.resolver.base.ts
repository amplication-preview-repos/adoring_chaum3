/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QueueItem } from "./QueueItem";
import { QueueItemCountArgs } from "./QueueItemCountArgs";
import { QueueItemFindManyArgs } from "./QueueItemFindManyArgs";
import { QueueItemFindUniqueArgs } from "./QueueItemFindUniqueArgs";
import { CreateQueueItemArgs } from "./CreateQueueItemArgs";
import { UpdateQueueItemArgs } from "./UpdateQueueItemArgs";
import { DeleteQueueItemArgs } from "./DeleteQueueItemArgs";
import { QueueItemService } from "../queueItem.service";
@graphql.Resolver(() => QueueItem)
export class QueueItemResolverBase {
  constructor(protected readonly service: QueueItemService) {}

  async _queueItemsMeta(
    @graphql.Args() args: QueueItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QueueItem])
  async queueItems(
    @graphql.Args() args: QueueItemFindManyArgs
  ): Promise<QueueItem[]> {
    return this.service.queueItems(args);
  }

  @graphql.Query(() => QueueItem, { nullable: true })
  async queueItem(
    @graphql.Args() args: QueueItemFindUniqueArgs
  ): Promise<QueueItem | null> {
    const result = await this.service.queueItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueueItem)
  async createQueueItem(
    @graphql.Args() args: CreateQueueItemArgs
  ): Promise<QueueItem> {
    return await this.service.createQueueItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QueueItem)
  async updateQueueItem(
    @graphql.Args() args: UpdateQueueItemArgs
  ): Promise<QueueItem | null> {
    try {
      return await this.service.updateQueueItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueueItem)
  async deleteQueueItem(
    @graphql.Args() args: DeleteQueueItemArgs
  ): Promise<QueueItem | null> {
    try {
      return await this.service.deleteQueueItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
