/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueueItemService } from "../queueItem.service";
import { QueueItemCreateInput } from "./QueueItemCreateInput";
import { QueueItem } from "./QueueItem";
import { QueueItemFindManyArgs } from "./QueueItemFindManyArgs";
import { QueueItemWhereUniqueInput } from "./QueueItemWhereUniqueInput";
import { QueueItemUpdateInput } from "./QueueItemUpdateInput";

export class QueueItemControllerBase {
  constructor(protected readonly service: QueueItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QueueItem })
  async createQueueItem(
    @common.Body() data: QueueItemCreateInput
  ): Promise<QueueItem> {
    return await this.service.createQueueItem({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        queueContent: true,
        queueItemStatus: true,
        queueStatusType: true,
        status: true,
        statusTypeQueueItem: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QueueItem] })
  @ApiNestedQuery(QueueItemFindManyArgs)
  async queueItems(@common.Req() request: Request): Promise<QueueItem[]> {
    const args = plainToClass(QueueItemFindManyArgs, request.query);
    return this.service.queueItems({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        queueContent: true,
        queueItemStatus: true,
        queueStatusType: true,
        status: true,
        statusTypeQueueItem: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QueueItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queueItem(
    @common.Param() params: QueueItemWhereUniqueInput
  ): Promise<QueueItem | null> {
    const result = await this.service.queueItem({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        queueContent: true,
        queueItemStatus: true,
        queueStatusType: true,
        status: true,
        statusTypeQueueItem: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QueueItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueueItem(
    @common.Param() params: QueueItemWhereUniqueInput,
    @common.Body() data: QueueItemUpdateInput
  ): Promise<QueueItem | null> {
    try {
      return await this.service.updateQueueItem({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          queueContent: true,
          queueItemStatus: true,
          queueStatusType: true,
          status: true,
          statusTypeQueueItem: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QueueItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueueItem(
    @common.Param() params: QueueItemWhereUniqueInput
  ): Promise<QueueItem | null> {
    try {
      return await this.service.deleteQueueItem({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          queueContent: true,
          queueItemStatus: true,
          queueStatusType: true,
          status: true,
          statusTypeQueueItem: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
