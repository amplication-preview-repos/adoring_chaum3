/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RelayService } from "../relay.service";
import { RelayCreateInput } from "./RelayCreateInput";
import { Relay } from "./Relay";
import { RelayFindManyArgs } from "./RelayFindManyArgs";
import { RelayWhereUniqueInput } from "./RelayWhereUniqueInput";
import { RelayUpdateInput } from "./RelayUpdateInput";

export class RelayControllerBase {
  constructor(protected readonly service: RelayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Relay })
  async createRelay(@common.Body() data: RelayCreateInput): Promise<Relay> {
    return await this.service.createRelay({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Relay] })
  @ApiNestedQuery(RelayFindManyArgs)
  async relays(@common.Req() request: Request): Promise<Relay[]> {
    const args = plainToClass(RelayFindManyArgs, request.query);
    return this.service.relays({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Relay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async relay(
    @common.Param() params: RelayWhereUniqueInput
  ): Promise<Relay | null> {
    const result = await this.service.relay({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Relay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRelay(
    @common.Param() params: RelayWhereUniqueInput,
    @common.Body() data: RelayUpdateInput
  ): Promise<Relay | null> {
    try {
      return await this.service.updateRelay({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Relay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRelay(
    @common.Param() params: RelayWhereUniqueInput
  ): Promise<Relay | null> {
    try {
      return await this.service.deleteRelay({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
