/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Relay } from "./Relay";
import { RelayCountArgs } from "./RelayCountArgs";
import { RelayFindManyArgs } from "./RelayFindManyArgs";
import { RelayFindUniqueArgs } from "./RelayFindUniqueArgs";
import { CreateRelayArgs } from "./CreateRelayArgs";
import { UpdateRelayArgs } from "./UpdateRelayArgs";
import { DeleteRelayArgs } from "./DeleteRelayArgs";
import { RelayService } from "../relay.service";
@graphql.Resolver(() => Relay)
export class RelayResolverBase {
  constructor(protected readonly service: RelayService) {}

  async _relaysMeta(
    @graphql.Args() args: RelayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Relay])
  async relays(@graphql.Args() args: RelayFindManyArgs): Promise<Relay[]> {
    return this.service.relays(args);
  }

  @graphql.Query(() => Relay, { nullable: true })
  async relay(
    @graphql.Args() args: RelayFindUniqueArgs
  ): Promise<Relay | null> {
    const result = await this.service.relay(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Relay)
  async createRelay(@graphql.Args() args: CreateRelayArgs): Promise<Relay> {
    return await this.service.createRelay({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Relay)
  async updateRelay(
    @graphql.Args() args: UpdateRelayArgs
  ): Promise<Relay | null> {
    try {
      return await this.service.updateRelay({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Relay)
  async deleteRelay(
    @graphql.Args() args: DeleteRelayArgs
  ): Promise<Relay | null> {
    try {
      return await this.service.deleteRelay(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
